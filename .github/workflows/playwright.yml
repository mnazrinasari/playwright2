name: Playwright Tests with Static HTML Report and Sendinblue Email

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
  schedule:
    - cron: '0 9 * * *'  # Trigger every day at 9 AM UTC

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: lts/*

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Run Playwright tests
      run: npx playwright test

    # Upload the latest HTML report as artifact (for future reference)
    - name: Upload the latest HTML report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: latest-html-report
        path: playwright-html-report/index.html
        retention-days: 30

    # Deploy HTML report to GitHub Pages (gh-pages)
    - name: Deploy HTML report to GitHub Pages
      if: ${{ always() }}
      run: |
        # Set up Git configuration for gh-pages deployment
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

        # Clone the repository using GITHUB_TOKEN for authentication
        git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git github-pages
        cd github-pages

        # Fetch the latest changes from the remote repository
        git fetch origin

        # Check if the gh-pages branch exists remotely
        if ! git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
          echo "gh-pages branch does not exist on remote. Creating it from main..."
          # Create gh-pages branch locally from main
          git checkout -b gh-pages origin/main
          # Push the new gh-pages branch to the remote
          git push -u origin gh-pages
        else
          echo "gh-pages branch exists on remote. Syncing with remote..."

          # Check out the existing gh-pages branch from remote
          git checkout gh-pages
          
          # Rebase the gh-pages branch onto main
          git rebase origin/main || git rebase --skip  # Skip the conflicting commit if there's a rebase error
        fi

        # Check if the HTML report exists and copy it to the gh-pages branch
        if [ -f "../playwright-html-report/index.html" ]; then
          cp -r ../playwright-html-report/index.html ./index.html  # Copy the HTML report to the root
          echo "HTML report copied to gh-pages"
        else
          echo "Error: index.html not found. Skipping copy to gh-pages."
          exit 1
        fi

        # Add and commit the new files to the gh-pages branch
        git add index.html
        git commit -m "Deploy updated HTML report" || echo "No changes to commit"

        # Force-push the changes to the gh-pages branch
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages --force

        # Debug: Confirm successful push
        echo "Pushed HTML report to gh-pages"

    # Create a timestamped backup of index.html with a unique name (moved here after deployment)
    - name: Create a unique backup directory with timestamp
      id: backup
      run: |
        TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
        BACKUP_FILE="playwright-html-report/index_$TIMESTAMP.html"
        mv playwright-html-report/index.html "$BACKUP_FILE"
        echo "Backup created with name: $BACKUP_FILE"
        echo "BACKUP_FILE_PATH=$BACKUP_FILE" >> $GITHUB_ENV  # Saving the path to the backup file as an environment variable
        ls -alh "$BACKUP_FILE"

    # Remove index.html from the main branch after it's deployed to gh-pages
    - name: Remove index.html from the main branch
      if: ${{ always() }}
      run: |
        # Checkout to the main branch
        git checkout main

        # Check if the file exists before removing it
        if [ -f "playwright-html-report/index.html" ]; then
          echo "Removing index.html from main branch..."
          git rm playwright-html-report/index.html
          git commit -m "Remove index.html from main branch after deployment to gh-pages"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git main
        else
          echo "index.html does not exist in the main branch. Skipping removal."
        fi

    # Send email notification with link to the backup report using Sendinblue API
    - name: Send email with report link using Sendinblue API
      if: ${{ always() }}
      run: |
        # Install curl for API request
        sudo apt-get update
        sudo apt-get install -y curl

        # Set environment variables from GitHub secrets
        SENDINBLUE_API_KEY="${{ secrets.SENDINBLUE_API_KEY }}"
        SENDINBLUE_SENDER_EMAIL="${{ secrets.SENDINBLUE_SENDER_EMAIL }}"
        SENDINBLUE_RECIPIENT_EMAIL="${{ secrets.SENDINBLUE_RECIPIENT_EMAIL }}"
        EMAIL_SUBJECT="Playwright Tests Completed - HTML Report"
        
        # Ensure the backup file is in the correct GitHub Pages folder
        BACKUP_FILE_PATH="${{ env.BACKUP_FILE_PATH }}"
        BACKUP_FILE_URL="https://mnazrinasari.github.io/playwright2/$BACKUP_FILE_PATH"  # Ensure correct URL path

        EMAIL_BODY="Your Playwright tests have completed successfully. Check the report in the following link: $BACKUP_FILE_URL"

        # Prepare the email payload and send using Sendinblue API
        curl -X POST https://api.sendinblue.com/v3/smtp/email \
          -H "api-key: $SENDINBLUE_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{
            "sender": { "email": "'"$SENDINBLUE_SENDER_EMAIL"'" },
            "to": [ { "email": "'"$SENDINBLUE_RECIPIENT_EMAIL"'" } ],
            "subject": "'"$EMAIL_SUBJECT"'",
            "htmlContent": "<html><body><p>'"$EMAIL_BODY"'</p></body></html>"
        }'

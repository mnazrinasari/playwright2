name: Playwright Tests with Jest Report and Sendinblue Email

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
  schedule:
    # Daily trigger at 9 AM UTC
    - cron: '0 9 * * *'  # This triggers the workflow every day at 9 AM UTC

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: lts/*

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Debug current directory and files
      run: |
        echo "Current directory: $(pwd)"
        ls -alh

    - name: Set TEST_ENV from loader.config.js
      run: |
        echo "Running from: $(pwd)"  # Debugging: Print current directory
        node "${{ github.workspace }}/get-test-env.js" >> $GITHUB_ENV

    - name: Run Playwright tests with Jest Reporter
      run: npx playwright test --reporter=jest-html-reporter
      env:
        TEST_ENV: ${{ secrets.TEST_ENV }}

    - name: Debug jest-report folder after generation
      run: |
        echo "Listing jest-report folder:"
        ls -alh jest-report || echo "jest-report folder doesn't exist."

    - uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: jest-report/
        retention-days: 30

    - name: Deploy Jest report to GitHub Pages
      if: ${{ always() }}  # Ensure this step runs even if previous steps fail
      run: |
        # Deploy Jest report to GitHub Pages
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # Clone the repository and switch to gh-pages branch
        git clone https://github.com/${{ github.repository }}.git github-pages
        cd github-pages

        # Create gh-pages branch if it doesn't exist or switch to it
        git checkout -b gh-pages || git checkout gh-pages

        # Pull the latest changes from the remote gh-pages branch with rebase
        git pull --rebase origin gh-pages

        # Check if jest-report exists before copying
        echo "Listing files before copying jest-report:"
        ls -alh ../jest-report || echo "jest-report folder doesn't exist."

        # Copy the newly generated jest-report to the current directory
        cp -r ../jest-report ./  # Copy the jest-report to the current directory

        # Debug: List the files again after copying Jest report
        echo "Files in gh-pages after copying Jest report:"
        ls -alh

        # Add and commit the new files to the gh-pages branch
        git add jest-report
        git commit -m "Deploy updated Jest report" || echo "No changes to commit"

        # Push the changes to the gh-pages branch
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages

        # Debug: Confirm successful push
        echo "Pushed Jest report to gh-pages"

    - name: Send email with Jest report link using Sendinblue API
      if: ${{ always() }}  # Ensure this step runs even if previous steps fail
      run: |
        # Install curl for API request
        sudo apt-get update
        sudo apt-get install -y curl

        # Set environment variables from GitHub secrets
        SENDINBLUE_API_KEY="${{ secrets.SENDINBLUE_API_KEY }}"
        SENDINBLUE_SENDER_EMAIL="${{ secrets.SENDINBLUE_SENDER_EMAIL }}"
        SENDINBLUE_RECIPIENT_EMAIL="${{ secrets.SENDINBLUE_RECIPIENT_EMAIL }}"
        EMAIL_SUBJECT="Playwright Tests Completed - Jest Report"
        EMAIL_BODY="Your Playwright tests have completed successfully. Check the report in the following link: https://your-github-username.github.io/repository-name/jest-report/index.html"

        # Prepare the email payload and send using Sendinblue API
        curl -X POST https://api.sendinblue.com/v3/smtp/email \
          -H "api-key: $SENDINBLUE_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{
            "sender": { "email": "'"$SENDINBLUE_SENDER_EMAIL"'" },
            "to": [ { "email": "'"$SENDINBLUE_RECIPIENT_EMAIL"'" } ],
            "subject": "'"$EMAIL_SUBJECT"'",
            "htmlContent": "<html><body><p>'"$EMAIL_BODY"'</p></body></html>"
        }'

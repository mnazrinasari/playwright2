name: Playwright Tests with Allure Report and Sendinblue Email

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
  schedule:
    # Daily trigger at 9 AM UTC
    - cron: '0 9 * * *'  # This triggers the workflow every day at 9 AM UTC

    # Weekly trigger every Monday at 9 AM UTC
    # - cron: '0 9 * * 1'  # This triggers the workflow every Monday at 9 AM UTC

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: lts/*

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    # Step to set TEST_ENV from loader.config.js
    - name: Set TEST_ENV from loader.config.js
      run: |
        # Run loader.config.js to read the TEST_ENV
        node -e "require('../../config/loader.config');" # Make sure this path is correct based on your directory structure

        # Export TEST_ENV to GitHub Actions environment
        echo "TEST_ENV=$(node -e 'console.log(require(\"../../config/loader.config\").environment)')" >> $GITHUB_ENV

    - name: Run Playwright tests
      run: npx playwright test

    - name: Install Allure Commandline (via npm)
      run: |
        npm install -g allure-commandline --save-dev

    - name: Generate Allure report
      if: ${{ always() }}  # Ensure this step runs even if previous steps fail
      run: allure generate allure-results --clean -o allure-report

    - uses: actions/upload-artifact@v4
      if: ${{ always() }}  # Ensure this step runs even if previous steps fail
      with:
        name: playwright-report
        path: allure-report/
        retention-days: 30

    - name: Deploy Allure report to GitHub Pages
      if: ${{ always() }}  # Ensure this step runs even if previous steps fail
      run: |
        # Deploy Allure report to GitHub Pages
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # Clone the repository and switch to gh-pages branch
        git clone https://github.com/${{ github.repository }}.git github-pages
        cd github-pages

        # Create gh-pages branch if it doesn't exist or switch to it
        git checkout -b gh-pages || git checkout gh-pages

        # Pull the latest changes from the remote gh-pages branch with rebase
        git pull --rebase origin gh-pages

        # Copy the Allure report into the 'gh-pages' directory
        # Ensure that we copy the files into a folder named 'allure-report'
        mkdir -p allure-report
        cp -r ../allure-report/* allure-report/

        # Add, commit, and push the changes to the gh-pages branch
        git add .
        git commit -m "Deploy Allure report"
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages

    - name: Send email with Allure report link using Sendinblue API
      if: ${{ always() }}  # Ensure this step runs even if previous steps fail
      run: |
        # Install curl for API request
        sudo apt-get update
        sudo apt-get install -y curl

        # Set environment variables from GitHub secrets
        SENDINBLUE_API_KEY="${{ secrets.SENDINBLUE_API_KEY }}"
        SENDINBLUE_SENDER_EMAIL="${{ secrets.SENDINBLUE_SENDER_EMAIL }}"
        SENDINBLUE_RECIPIENT_EMAIL="${{ secrets.SENDINBLUE_RECIPIENT_EMAIL }}"
        EMAIL_SUBJECT="Playwright Tests Completed - Allure Report"
        EMAIL_BODY="Your Playwright tests have completed successfully. Check the report in the following link: https://mnazrinasari.github.io/playwright2/allure-report/index.html"

        # Prepare the email payload and send using Sendinblue API
        curl -X POST https://api.sendinblue.com/v3/smtp/email \
          -H "api-key: $SENDINBLUE_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{
            "sender": { "email": "'"$SENDINBLUE_SENDER_EMAIL"'" },
            "to": [ { "email": "'"$SENDINBLUE_RECIPIENT_EMAIL"'" } ],
            "subject": "'"$EMAIL_SUBJECT"'",
            "htmlContent": "<html><body><p>'"$EMAIL_BODY"'</p></body></html>"
        }'

name: Deploy Playwright Report to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Run Playwright tests
      run: npx playwright test
      continue-on-error: true
    
    # NEW: Compress the HTML report before creating backup
    - name: Compress HTML report
      if: always()
      run: |
        if [ -f "playwright-html-report/index.html" ]; then
          echo "Original report size:"
          ls -lh playwright-html-report/index.html
          
          # Create compressed version
          gzip -c playwright-html-report/index.html > playwright-html-report/index.html.gz
          
          # Create a lightweight landing page that loads the compressed report
          cat > playwright-html-report/index_light.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>üé≠ Playwright Test Report</title>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    max-width: 800px;
                    margin: 0 auto;
                    padding: 20px;
                    line-height: 1.6;
                    background: #f8f9fa;
                }
                .container {
                    background: white;
                    border-radius: 12px;
                    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                    padding: 30px;
                    text-align: center;
                }
                h1 {
                    color: #2d3748;
                    margin-bottom: 10px;
                }
                .subtitle {
                    color: #718096;
                    margin-bottom: 30px;
                }
                .btn {
                    display: inline-block;
                    padding: 12px 24px;
                    background: #0969da;
                    color: white;
                    text-decoration: none;
                    border-radius: 6px;
                    margin: 10px;
                    transition: all 0.2s;
                }
                .btn:hover {
                    background: #0860ca;
                    transform: translateY(-2px);
                }
                .btn-secondary {
                    background: #28a745;
                }
                .btn-secondary:hover {
                    background: #218838;
                }
                .info {
                    background: #e3f2fd;
                    border: 1px solid #bbdefb;
                    border-radius: 8px;
                    padding: 16px;
                    margin: 20px 0;
                    text-align: left;
                }
                .timestamp {
                    color: #6c757d;
                    font-size: 0.9em;
                    margin-top: 20px;
                }
                .loader {
                    border: 4px solid #f3f3f3;
                    border-top: 4px solid #0969da;
                    border-radius: 50%;
                    width: 40px;
                    height: 40px;
                    animation: spin 1s linear infinite;
                    margin: 20px auto;
                    display: none;
                }
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üé≠ Playwright Test Report</h1>
                <p class="subtitle">Optimized for faster loading</p>
                
                <div class="info">
                    <h3>üìä Report Information</h3>
                    <p><strong>Status:</strong> Report compressed for optimal performance</p>
                    <p><strong>Size:</strong> Reduced from ~46MB to ~5-10MB</p>
                    <p><strong>Features:</strong> Full interactive report with screenshots and traces</p>
                </div>
                
                <div class="loader" id="loader"></div>
                
                <div id="buttons">
                    <a href="javascript:void(0)" class="btn" onclick="loadFullReport()">üìã Load Full Report</a>
                    <a href="index.html.gz" class="btn btn-secondary" download>‚¨áÔ∏è Download Report</a>
                </div>
                
                <div class="timestamp">
                    Generated: <span id="timestamp"></span>
                </div>
            </div>
            
            <script>
                document.getElementById('timestamp').textContent = new Date().toLocaleString();
                
                async function loadFullReport() {
                    const loader = document.getElementById('loader');
                    const buttons = document.getElementById('buttons');
                    
                    loader.style.display = 'block';
                    buttons.style.display = 'none';
                    
                    try {
                        const response = await fetch('index.html.gz');
                        if (!response.ok) throw new Error('Failed to load report');
                        
                        const compressedData = await response.arrayBuffer();
                        
                        if ('DecompressionStream' in window) {
                            const stream = new DecompressionStream('gzip');
                            const decompressedResponse = new Response(
                                new Response(compressedData).body.pipeThrough(stream)
                            );
                            const html = await decompressedResponse.text();
                            
                            // Replace current page with full report
                            document.open();
                            document.write(html);
                            document.close();
                        } else {
                            // Fallback for older browsers
                            alert('Your browser does not support automatic decompression. Please download the report manually.');
                            window.location.href = 'index.html.gz';
                        }
                    } catch (error) {
                        console.error('Error loading report:', error);
                        alert('Error loading report. Please try downloading it manually.');
                        loader.style.display = 'none';
                        buttons.style.display = 'block';
                    }
                }
            </script>
        </body>
        </html>
        EOF
          
          # Replace the original index.html with the lightweight version
          mv playwright-html-report/index.html playwright-html-report/index_original.html
          mv playwright-html-report/index_light.html playwright-html-report/index.html
          
          echo "Compressed report size:"
          ls -lh playwright-html-report/index.html.gz
          echo "New lightweight index.html size:"
          ls -lh playwright-html-report/index.html
        else
          echo "No HTML report found to compress"
        fi

    # Create a unique backup directory with timestamp
    - name: Create a unique backup directory with timestamp
      id: backup
      run: |
        TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
        BACKUP_FILE="playwright-html-report/index_$TIMESTAMP.html"
        
        # Create backup from compressed original (if it exists)
        if [ -f "playwright-html-report/index_original.html" ]; then
          mv playwright-html-report/index_original.html "$BACKUP_FILE"
        elif [ -f "playwright-html-report/index.html" ]; then
          cp playwright-html-report/index.html "$BACKUP_FILE"
        fi
        
        # Also create compressed backup
        if [ -f "playwright-html-report/index.html.gz" ]; then
          cp playwright-html-report/index.html.gz "playwright-html-report/index_$TIMESTAMP.html.gz"
        fi
        
        echo "Backup created with name: $BACKUP_FILE"
        echo "BACKUP_FILE_PATH=$BACKUP_FILE" >> $GITHUB_ENV
        ls -alh "$BACKUP_FILE"

    # Upload the latest HTML report as artifact (for future reference)
    - name: Upload the latest HTML report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: latest-html-report
        path: playwright-html-report/
        retention-days: 30

    # Deploy HTML report to GitHub Pages (gh-pages)
    - name: Deploy HTML report to GitHub Pages
      if: ${{ always() }}
      run: |
        # Set up Git configuration
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        # Check if gh-pages branch exists on remote
        if git ls-remote --heads origin gh-pages | grep -q gh-pages; then
          echo "gh-pages branch exists on remote. Syncing with remote..."
          git clone --single-branch --branch gh-pages https://github.com/${{ github.repository }} github-pages
          cd github-pages
          
          # Check out the existing gh-pages branch from remote
          git checkout gh-pages
          
          # Rebase the gh-pages branch onto main
          git rebase origin/main
          
          # If there are conflicts during rebase, handle them here
          if [ $? -ne 0 ]; then
            echo "There are conflicts during rebase. Please resolve them manually."
            exit 1
          fi
        else
          echo "gh-pages branch doesn't exist. Creating it..."
          git clone https://github.com/${{ github.repository }} github-pages
          cd github-pages
          git checkout --orphan gh-pages
          git rm -rf .
          echo "# GitHub Pages" > README.md
          git add README.md
          git commit -m "Initial gh-pages commit"
          git push origin gh-pages
        fi
        
        # Debug: List the files before copying
        echo "Listing files before copying HTML report:"
        ls -alh ../playwright-html-report || echo "playwright-html-report folder doesn't exist."
        
        # Copy the newly generated HTML report to the root of the gh-pages branch
        cp -r ../playwright-html-report ./
        
        # Debug: List the files again after copying the HTML report
        echo "Files in gh-pages after copying HTML report:"
        ls -alh
        
        # Add and commit the new files to the gh-pages branch
        git add playwright-html-report
        git commit -m "Deploy updated HTML report" || echo "No changes to commit"
        
        # Push the changes to the gh-pages branch with retry logic
        for i in {1..3}; do
          echo "Attempting to push to gh-pages (attempt $i/3)..."
          if git push origin gh-pages; then
            echo "‚úÖ Successfully pushed to gh-pages on attempt $i"
            break
          else
            echo "‚ùå Push failed on attempt $i"
            if [ $i -lt 3 ]; then
              sleep_time=$((2**i))
              echo "Waiting ${sleep_time} seconds before retry..."
              sleep $sleep_time
            else
              echo "‚ùå All push attempts failed"
              exit 1
            fi
          fi
        done
        
        # Debug: Confirm successful push
        echo "Pushed HTML report to gh-pages"

    # Send email notification with link to the backup report using Sendinblue API
    - name: Send email with report link using Sendinblue API
      if: ${{ always() }}
      run: |
        # Prepare the email content
        REPORT_URL="https://mnazrinasari.github.io/playwright2/"
        
        # Ensure the backup file is in the correct GitHub Pages folder
        BACKUP_FILE_PATH="${{ env.BACKUP_FILE_PATH }}"
        BACKUP_FILE_URL="https://mnazrinasari.github.io/playwright2/$BACKUP_FILE_PATH"
        
        EMAIL_BODY="üé≠ Playwright Test Report Complete!

        Your tests have finished successfully. The report has been optimized and compressed for faster loading.

        üìä View Report Dashboard: $REPORT_URL
        üìÅ Download Backup: $BACKUP_FILE_URL
        
        ‚úÖ Report Features:
        - Compressed from ~46MB to ~5-10MB
        - Interactive dashboard with one-click loading
        - Full test details, screenshots, and traces
        - Timestamped backup available
        
        Generated: $(date)
        Repository: mnazrinasari/playwright2"
        
        # Send the email using Sendinblue API
        curl -X POST \
          "https://api.sendinblue.com/v3/smtp/email" \
          -H "Accept: application/json" \
          -H "Content-Type: application/json" \
          -H "Api-Key: ${{ secrets.SENDINBLUE_API_KEY }}" \
          -d "{
            \"sender\": {\"name\": \"Playwright Tests\", \"email\": \"${{ secrets.SENDER_EMAIL }}\"},
            \"to\": [{\"email\": \"${{ secrets.RECIPIENT_EMAIL }}\", \"name\": \"Test Results\"}],
            \"subject\": \"üé≠ Playwright Test Report - $(date +'%Y-%m-%d %H:%M')\",
            \"textContent\": \"$EMAIL_BODY\"
          }"
        
        echo "Email sent successfully with report link: $BACKUP_FILE_URL"

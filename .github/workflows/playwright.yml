name: Deploy Playwright Report to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Run Playwright tests
      run: npx playwright test
      continue-on-error: true
    
    - name: Compress and optimize HTML report
      if: always()
      run: |
        if [ -f "playwright-html-report/index.html" ]; then
          echo "Original report size:"
          ls -lh playwright-html-report/index.html
          
          # Create timestamp for backup
          TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
          BACKUP_FILE="index_$TIMESTAMP.html"
          
          # Create compressed version
          echo "Compressing HTML report..."
          gzip -c playwright-html-report/index.html > playwright-html-report/index.html.gz
          
          # Create timestamped backup (compressed)
          cp playwright-html-report/index.html.gz "playwright-html-report/${BACKUP_FILE}.gz"
          
          # Create lightweight landing page
          cat > playwright-html-report/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>üé≠ Playwright Test Report</title>
            <style>
                * {
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
                .container {
                    background: white;
                    border-radius: 20px;
                    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                    padding: 40px;
                    text-align: center;
                    max-width: 600px;
                    width: 90%;
                }
                h1 {
                    color: #2d3748;
                    margin-bottom: 10px;
                    font-size: 2.5rem;
                }
                .subtitle {
                    color: #718096;
                    margin-bottom: 30px;
                    font-size: 1.1rem;
                }
                .stats {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                    gap: 20px;
                    margin: 30px 0;
                }
                .stat-card {
                    background: #f7fafc;
                    border-radius: 12px;
                    padding: 20px;
                    border-left: 4px solid #4299e1;
                }
                .stat-value {
                    font-size: 2rem;
                    font-weight: bold;
                    color: #2d3748;
                }
                .stat-label {
                    color: #718096;
                    font-size: 0.9rem;
                    margin-top: 5px;
                }
                .btn {
                    display: inline-block;
                    padding: 15px 30px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    text-decoration: none;
                    border-radius: 50px;
                    margin: 10px;
                    transition: all 0.3s ease;
                    font-weight: 600;
                    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
                }
                .btn:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 6px 20px rgba(0,0,0,0.3);
                }
                .btn-secondary {
                    background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
                }
                .timestamp {
                    color: #a0aec0;
                    font-size: 0.9rem;
                    margin-top: 20px;
                }
                .info-box {
                    background: #ebf8ff;
                    border: 1px solid #bee3f8;
                    border-radius: 8px;
                    padding: 15px;
                    margin: 20px 0;
                    text-align: left;
                }
                .size-info {
                    color: #2b6cb0;
                    font-size: 0.9rem;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üé≠ Playwright Tests</h1>
                <p class="subtitle">Test Report Dashboard</p>
                
                <div class="stats">
                    <div class="stat-card">
                        <div class="stat-value" id="testCount">-</div>
                        <div class="stat-label">Total Tests</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="passCount">-</div>
                        <div class="stat-label">Passed</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="failCount">-</div>
                        <div class="stat-label">Failed</div>
                    </div>
                </div>
                
                <div class="info-box">
                    <div class="size-info">
                        üìä <strong>Optimized Report:</strong> Report compressed for faster loading<br>
                        üöÄ <strong>Interactive:</strong> Full test details, screenshots, and traces available
                    </div>
                </div>
                
                <a href="report.html" class="btn">üìã View Full Report</a>
                <a href="index.html.gz" class="btn btn-secondary" download>‚¨áÔ∏è Download Report</a>
                
                <div class="timestamp">
                    Generated on <span id="timestamp"></span>
                </div>
            </div>
            
            <script>
                // Set timestamp
                document.getElementById('timestamp').textContent = new Date().toLocaleString();
                
                // Try to load basic stats from compressed report
                async function loadStats() {
                    try {
                        // This is a placeholder - in a real implementation, you'd parse the compressed report
                        // For now, we'll show static values
                        document.getElementById('testCount').textContent = 'Loading...';
                        document.getElementById('passCount').textContent = 'Loading...';
                        document.getElementById('failCount').textContent = 'Loading...';
                    } catch (error) {
                        console.log('Could not load stats:', error);
                    }
                }
                
                loadStats();
            </script>
        </body>
        </html>
        EOF
          
          # Create the report viewer that decompresses the full report
          cat > playwright-html-report/report.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Loading Playwright Report...</title>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    margin: 0;
                    padding: 0;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
                .loader-container {
                    background: white;
                    border-radius: 20px;
                    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                    padding: 40px;
                    text-align: center;
                    max-width: 500px;
                    width: 90%;
                }
                .spinner {
                    border: 4px solid #f3f3f3;
                    border-top: 4px solid #667eea;
                    border-radius: 50%;
                    width: 60px;
                    height: 60px;
                    animation: spin 1s linear infinite;
                    margin: 0 auto 20px;
                }
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
                .error {
                    color: #e53e3e;
                    background: #fed7d7;
                    border: 1px solid #feb2b2;
                    border-radius: 8px;
                    padding: 20px;
                    margin: 20px 0;
                    display: none;
                }
                .progress {
                    width: 100%;
                    height: 8px;
                    background: #e2e8f0;
                    border-radius: 4px;
                    overflow: hidden;
                    margin: 20px 0;
                }
                .progress-bar {
                    height: 100%;
                    background: linear-gradient(90deg, #667eea, #764ba2);
                    width: 0%;
                    transition: width 0.3s ease;
                }
                .btn {
                    display: inline-block;
                    padding: 12px 24px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    text-decoration: none;
                    border-radius: 25px;
                    margin: 10px;
                    transition: all 0.3s ease;
                }
                .btn:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 6px 20px rgba(0,0,0,0.3);
                }
            </style>
        </head>
        <body>
            <div class="loader-container">
                <div class="spinner"></div>
                <h2>Loading Test Report</h2>
                <p id="status">Downloading compressed report...</p>
                <div class="progress">
                    <div class="progress-bar" id="progressBar"></div>
                </div>
                
                <div class="error" id="error">
                    <h3>‚ùå Error Loading Report</h3>
                    <p id="errorMessage">Unable to load the compressed report.</p>
                    <a href="index.html.gz" class="btn" download>‚¨áÔ∏è Download Report</a>
                    <a href="index.html" class="btn">üè† Back to Dashboard</a>
                </div>
            </div>
            
            <script>
                async function loadCompressedReport() {
                    const statusEl = document.getElementById('status');
                    const progressEl = document.getElementById('progressBar');
                    const errorEl = document.getElementById('error');
                    const errorMessageEl = document.getElementById('errorMessage');
                    
                    try {
                        statusEl.textContent = 'Fetching compressed report...';
                        progressEl.style.width = '20%';
                        
                        const response = await fetch('index.html.gz');
                        if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                        
                        statusEl.textContent = 'Decompressing report...';
                        progressEl.style.width = '60%';
                        
                        const compressedData = await response.arrayBuffer();
                        
                        // Check if browser supports decompression
                        if ('DecompressionStream' in window) {
                            statusEl.textContent = 'Processing report...';
                            progressEl.style.width = '80%';
                            
                            const stream = new DecompressionStream('gzip');
                            const decompressedResponse = new Response(
                                new Response(compressedData).body.pipeThrough(stream)
                            );
                            const html = await decompressedResponse.text();
                            
                            statusEl.textContent = 'Rendering report...';
                            progressEl.style.width = '100%';
                            
                            // Small delay to show completion
                            await new Promise(resolve => setTimeout(resolve, 500));
                            
                            // Replace current document with decompressed HTML
                            document.open();
                            document.write(html);
                            document.close();
                        } else {
                            throw new Error('Browser does not support automatic decompression. Please download the report manually.');
                        }
                    } catch (error) {
                        console.error('Error loading compressed report:', error);
                        document.querySelector('.loader-container .spinner').style.display = 'none';
                        document.querySelector('.progress').style.display = 'none';
                        statusEl.style.display = 'none';
                        errorMessageEl.textContent = error.message;
                        errorEl.style.display = 'block';
                    }
                }
                
                // Start loading the compressed report
                loadCompressedReport();
            </script>
        </body>
        </html>
        EOF
          
          # Save environment variables for later use
          echo "BACKUP_FILE_PATH=playwright-html-report/$BACKUP_FILE" >> $GITHUB_ENV
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          
          echo "Compressed report size:"
          ls -lh playwright-html-report/index.html.gz
          echo "New index.html size:"
          ls -lh playwright-html-report/index.html
          echo "Backup file: $BACKUP_FILE"
        else
          echo "No HTML report found to compress"
        fi
    
    - name: Upload the latest HTML report as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: latest-html-report
        path: playwright-html-report/
        retention-days: 30
    
    - name: Set up Git configuration for gh-pages deployment
      if: always()
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
    
    - name: Deploy HTML report to GitHub Pages
      if: always()
      run: |
        # Create or clone gh-pages branch
        if git ls-remote --heads origin gh-pages | grep -q gh-pages; then
          echo "gh-pages branch exists on remote. Cloning..."
          git clone --single-branch --branch gh-pages https://github.com/${{ github.repository }} github-pages
          cd github-pages
          
          # Sync with main branch (rebase onto main)
          echo "Syncing gh-pages with main branch..."
          git fetch origin main
          git rebase origin/main
          
          # Handle rebase conflicts
          if [ $? -ne 0 ]; then
            echo "There are conflicts during rebase. Please resolve them manually."
            exit 1
          fi
        else
          echo "gh-pages branch doesn't exist. Creating it..."
          git clone https://github.com/${{ github.repository }} github-pages
          cd github-pages
          git checkout --orphan gh-pages
          git rm -rf .
          echo "# Playwright Test Reports" > README.md
          git add README.md
          git commit -m "Initial gh-pages commit"
          git push origin gh-pages
        fi
        
        # Debug: List files before copying
        echo "Listing files before copying HTML report:"
        ls -alh ../playwright-html-report/ || echo "playwright-html-report folder doesn't exist."
        
        # Copy the compressed report files
        echo "Copying compressed report files..."
        cp -r ../playwright-html-report/* ./
        
        # Create/update README with report info
        cat > README.md << 'EOF'
        # üé≠ Playwright Test Reports
        
        This repository contains automated test reports generated by Playwright.
        
        ## üìä Latest Report
        - **Dashboard**: [View Report Dashboard](https://mnazrinasari.github.io/playwright2/)
        - **Full Report**: Click "View Full Report" from the dashboard
        - **Direct Download**: Download the compressed report file
        
        ## üöÄ Features
        - **Compressed Reports**: Optimized for faster loading
        - **Interactive Dashboard**: Quick overview of test results
        - **Full Test Details**: Screenshots, traces, and detailed logs
        - **Historical Reports**: Timestamped backups available
        
        ## üìÖ Last Updated
        EOF
        echo "$(date '+%Y-%m-%d %H:%M:%S UTC')" >> README.md
        
        # Debug: List files after copying
        echo "Files in gh-pages after copying HTML report:"
        ls -alh
        
        # Add and commit changes
        git add .
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Deploy compressed HTML report - $(date '+%Y-%m-%d %H:%M:%S')"
          
          # Retry push up to 3 times with exponential backoff
          for i in {1..3}; do
            echo "Attempting to push to gh-pages (attempt $i/3)..."
            if git push origin gh-pages; then
              echo "‚úÖ Successfully pushed to gh-pages on attempt $i"
              break
            else
              echo "‚ùå Push failed on attempt $i"
              if [ $i -lt 3 ]; then
                sleep_time=$((2**i))
                echo "Waiting ${sleep_time} seconds before retry..."
                sleep $sleep_time
              else
                echo "‚ùå All push attempts failed"
                exit 1
              fi
            fi
          done
        fi
        
        echo "‚úÖ Deployed to GitHub Pages successfully!"
    
    - name: Send email with report link using Sendinblue API
      if: always()
      run: |
        # Prepare email content
        REPORT_URL="https://mnazrinasari.github.io/playwright2/"
        BACKUP_FILE_PATH="${{ env.BACKUP_FILE_PATH }}"
        BACKUP_FILE_URL="https://mnazrinasari.github.io/playwright2/${BACKUP_FILE_PATH}.gz"
        
        # Create HTML email body
        EMAIL_BODY=$(cat << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                .container { max-width: 600px; margin: 0 auto; padding: 20px; }
                .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px 8px 0 0; text-align: center; }
                .content { background: #f9f9f9; padding: 20px; border-radius: 0 0 8px 8px; }
                .btn { display: inline-block; padding: 12px 24px; background: #667eea; color: white; text-decoration: none; border-radius: 6px; margin: 10px 5px; }
                .stats { background: white; padding: 15px; border-radius: 6px; margin: 15px 0; }
                .footer { text-align: center; color: #666; font-size: 0.9em; margin-top: 20px; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üé≠ Playwright Test Report</h1>
                    <p>Test execution completed successfully</p>
                </div>
                <div class="content">
                    <h2>üìä Test Results Available</h2>
                    <p>Your Playwright tests have completed. The report has been optimized and deployed to GitHub Pages.</p>
                    
                    <div class="stats">
                        <h3>üìà Report Features:</h3>
                        <ul>
                            <li>‚úÖ Compressed for faster loading</li>
                            <li>üìä Interactive dashboard</li>
                            <li>üîç Detailed test results with screenshots</li>
                            <li>üìÅ Timestamped backup available</li>
                        </ul>
                    </div>
                    
                    <div style="text-align: center; margin: 30px 0;">
                        <a href="REPORT_URL_PLACEHOLDER" class="btn">üìã View Report Dashboard</a>
                        <a href="BACKUP_URL_PLACEHOLDER" class="btn">‚¨áÔ∏è Download Backup</a>
                    </div>
                    
                    <div class="footer">
                        <p>Report generated on: $(date)</p>
                        <p>Repository: mnazrinasari/playwright2</p>
                    </div>
                </div>
            </div>
        </body>
        </html>
        EOF
        )
        
        # Replace placeholders
        EMAIL_BODY="${EMAIL_BODY//REPORT_URL_PLACEHOLDER/$REPORT_URL}"
        EMAIL_BODY="${EMAIL_BODY//BACKUP_URL_PLACEHOLDER/$BACKUP_FILE_URL}"
        
        # Send email using Sendinblue API
        curl -X POST \
          "https://api.sendinblue.com/v3/smtp/email" \
          -H "Accept: application/json" \
          -H "Content-Type: application/json" \
          -H "Api-Key: ${{ secrets.SENDINBLUE_API_KEY }}" \
          -d '{
            "sender": {"name": "Playwright CI", "email": "noreply@yourdomain.com"},
            "to": [{"email": "your-email@example.com", "name": "Test Reports"}],
            "subject": "üé≠ Playwright Test Report - $(date +%Y-%m-%d)",
            "htmlContent": "'"${EMAIL_BODY}"'"
          }'
        
        echo "üìß Email notification sent successfully!"
        echo "üîó Report URL: $REPORT_URL"
        echo "üíæ Backup URL: $BACKUP_FILE_URL"

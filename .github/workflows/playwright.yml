name: Playwright Tests with Static HTML Report and Sendinblue Email

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
  schedule:
    # Daily trigger at 9 AM UTC
    - cron: '0 9 * * *'  # This triggers the workflow every day at 9 AM UTC

    # Weekly trigger every Monday at 9 AM UTC
    # - cron: '0 9 * * 1'  # This triggers the workflow every Monday at 9 AM UTC

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: lts/*

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Run Playwright tests
      run: npx playwright test

    # Create a timestamp for backup
    - name: Create a unique backup directory with timestamp
      run: |
        TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
        BACKUP_DIR="playwright-html-report-backup/$TIMESTAMP"
        mkdir -p "$BACKUP_DIR"
        mv playwright-html-report/index.html "$BACKUP_DIR/"
        echo "Backup directory: $BACKUP_DIR"
        ls -alh "$BACKUP_DIR"

    # Upload the latest HTML report as artifact (for future reference)
    - name: Upload the latest HTML report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: latest-html-report
        path: playwright-html-report/index.html
        retention-days: 30

    # Deploy HTML report to GitHub Pages
    - name: Deploy HTML report to GitHub Pages
      if: ${{ always() }}  # Ensure this step runs even if previous steps fail
      run: |
        # Set up Git configuration for gh-pages deployment
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

        # Clone the repository
        git clone https://github.com/${{ github.repository }}.git github-pages
        cd github-pages

        # Check if the gh-pages branch exists, if not, create it
        git fetch
        if ! git show-ref --verify --quiet refs/heads/gh-pages; then
          echo "gh-pages branch does not exist. Creating it from main..."
          git checkout -b gh-pages origin/main  # or origin/master if that's your default branch
          git push -u origin gh-pages  # Push the new gh-pages branch
        else
          # Switch to gh-pages branch if it exists
          git checkout gh-pages
          # Pull the latest changes from the remote gh-pages branch
          git pull --rebase origin gh-pages
        fi

        # Check if playwright-html-report exists before copying (if needed)
        echo "Listing files before copying HTML report:"
        ls -alh ../playwright-html-report || echo "playwright-html-report folder doesn't exist."

        # Copy the newly generated HTML report to the current directory
        cp -r ../playwright-html-report ./  # Copy the HTML report to the current directory

        # Debug: List the files again after copying the HTML report
        echo "Files in gh-pages after copying HTML report:"
        ls -alh

        # Add and commit the new files to the gh-pages branch
        git add playwright-html-report
        git commit -m "Deploy updated HTML report" || echo "No changes to commit"

        # Push the changes to the gh-pages branch
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages

        # Debug: Confirm successful push
        echo "Pushed HTML report to gh-pages"

    # Send email notification with link to the latest report using Sendinblue API
    - name: Send email with report link using Sendinblue API
      if: ${{ always() }}  # Ensure this step runs even if previous steps fail
      run: |
        # Install curl for API request
        sudo apt-get update
        sudo apt-get install -y curl

        # Set environment variables from GitHub secrets
        SENDINBLUE_API_KEY="${{ secrets.SENDINBLUE_API_KEY }}"
        SENDINBLUE_SENDER_EMAIL="${{ secrets.SENDINBLUE_SENDER_EMAIL }}"
        SENDINBLUE_RECIPIENT_EMAIL="${{ secrets.SENDINBLUE_RECIPIENT_EMAIL }}"
        EMAIL_SUBJECT="Playwright Tests Completed - HTML Report"
        EMAIL_BODY="Your Playwright tests have completed successfully. Check the report in the following link: https://mnazrinasari.github.io/playwright2/playwright-html-report/index.html"

        # Prepare the email payload and send using Sendinblue API
        curl -X POST https://api.sendinblue.com/v3/smtp/email \
          -H "api-key: $SENDINBLUE_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{
            "sender": { "email": "'"$SENDINBLUE_SENDER_EMAIL"'" },
            "to": [ { "email": "'"$SENDINBLUE_RECIPIENT_EMAIL"'" } ],
            "subject": "'"$EMAIL_SUBJECT"'",
            "htmlContent": "<html><body><p>'"$EMAIL_BODY"'</p></body></html>"
        }'
